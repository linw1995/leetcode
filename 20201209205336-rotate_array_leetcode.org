#+title: 189. Rotate Array
#+roam_key: https://leetcode.com/problems/rotate-array/
#+roam_alias:
#+roam_tags: "LeetCode"
#+STARTUP: latexpreview

[[https://leetcode.com/problems/rotate-array/][Problem Link]]

* Description

Given an array, rotate the array to the right by k steps, where k is non-negative.

Follow up:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?

* Examples

** Example 1

- *Input*: nums = [1,2,3,4,5,6,7], k = 3
- *Output*: [5,6,7,1,2,3,4]
- *Explanation*:
    - rotate 1 steps to the right: [7,1,2,3,4,5,6]
    - rotate 2 steps to the right: [6,7,1,2,3,4,5]
    - rotate 3 steps to the right: [5,6,7,1,2,3,4]

| no. | 0 swap ? | 0 | 1 | 2 | 3 | 4 | 5 | 6 |
|-----+----------+---+---+---+---+---+---+---|
|   0 |          | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
|   1 |        3 | 4 | 2 | 3 | 1 | 5 | 6 | 7 |
|   2 |        6 | 7 | 2 | 3 | 1 | 5 | 6 | 4 |
|   3 |        2 | 3 | 2 | 7 | 1 | 5 | 6 | 4 |
|   4 |        5 | 6 | 2 | 7 | 1 | 5 | 3 | 4 |
|   5 |        1 | 2 | 6 | 7 | 1 | 5 | 3 | 4 |
|   6 |        4 | 5 | 6 | 7 | 1 | 2 | 3 | 4 |
#+tblfm: @1$3..@1$>=$#-3::@<<$1..@>$1=@#-2

** Example 2

- *Input*: nums = [-1,-100,3,99], k = 2
- *Output*: [3,99,-1,-100]
- *Explanation*:
    - rotate 1 steps to the right: [99,-1,-100,3]
    - rotate 2 steps to the right: [3,99,-1,-100]

| no. | 0 swap ? |  0 |    1 |  2 |    3 |
|-----+----------+----+------+----+------|
|   0 |          | -1 | -100 |  3 |   99 |
|   1 |        2 |  3 | -100 | -1 |   99 |
|-----+----------+----+------+----+------|
|     | 1 swap ? |    |      |    |      |
|-----+----------+----+------+----+------|
|   2 |        2 |  3 |   99 | -1 | -100 |
#+tblfm: @1$3..@1$>=$#-3::@<<$1..@II$1=@#-2

* Constraints

- 1 <= nums.length <= $2 * 10^4$
- $-2^31$ <= nums[i] <= $2^31 - 1$
- 0 <= k <= $10^5$

* Solution

** Approach 1 --  Brute Force

The simplest approach is to rotate all the elements of the array in kk steps by rotating the elements by 1 unit in each step.

#+begin_src C :main no :includes stdio.h
  void rotate(int* nums, int numsSize, int k){
    k %= numsSize;
    int temp;
    for (int i = 0; i < k; i++) {
      for (int j = 0; j < numsSize; j++) {
        temp = nums[0];
        nums[0] = nums[j];
        nums[j] = temp;
      }
    }
  }
#+end_src

*Complexity Analysis*

- Time complexity: $\mathcal{O}(n*k)$. All the numbers are shifted by one step($O(n)$) k times.
- Space complexity: $\mathcal{O}(1)$. No extra space is used.

** Approach 2 -- Cyclic Replacements

#+begin_src C
  void rotate(int* nums, int numsSize, int k) {
    if (numsSize <= 1 || k == 0)
      return;

    k %= numsSize;
    for (int begin = 0, count = 0 ; count < numsSize; begin ++) {
      int tmp, idx = (begin + k) % k;
      do {
        tmp = nums[idx];
        nums[idx] = nums[begin];
        nums[begin] = tmp;
        count++;
        if (count > numsSize)
          break;
        idx = (idx + k) % numsSize;
      } while (begin != idx);
    }
  }
#+end_src

*Complexity Analysis*

- Time complexity: $\mathcal{O}(n)$. Only one pass is used.

- Space complexity: $\mathcal{O}(1)$. Constant extra space is used.
